version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    platform: linux/arm64
    container_name: archinsight_postgres
    environment:
      POSTGRES_DB: archinsight
      POSTGRES_USER: archinsight
      POSTGRES_PASSWORD: archinsight_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U archinsight"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - archinsight_network

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.13-community
    platform: linux/arm64
    container_name: archinsight_neo4j
    environment:
      NEO4J_AUTH: neo4j/archinsight_dev_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "archinsight_dev_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - archinsight_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: archinsight_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - archinsight_network

  # Backend FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      platform: linux/arm64
    container_name: archinsight_backend
    environment:
      - DATABASE_URL=postgresql://archinsight:archinsight_dev_password@postgres:5432/archinsight
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=archinsight_dev_password
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_secret_key_change_in_production}
      - ENVIRONMENT=development
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/uploads
      - ./data/cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - archinsight_network
    restart: unless-stopped

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      platform: linux/arm64
    container_name: archinsight_frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - archinsight_network
    restart: unless-stopped

  # ML Model Training Service (Optional)
  ml_trainer:
    build:
      context: ./backend
      dockerfile: Dockerfile.ml
      platform: linux/arm64
    container_name: archinsight_ml_trainer
    environment:
      - DATABASE_URL=postgresql://archinsight:archinsight_dev_password@postgres:5432/archinsight
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=archinsight_dev_password
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
      - ./data/models:/app/models
      - ./data/cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - archinsight_network
    profiles:
      - ml
    restart: "no"

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:

networks:
  archinsight_network:
    driver: bridge